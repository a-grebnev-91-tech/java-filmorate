CREATE TABLE IF NOT EXISTS film
(
    film_id      BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    description  VARCHAR(200),
    duration     INTEGER      NOT NULL,
    likes_count  INTEGER,
    film_name    VARCHAR(100) NOT NULL,
    release_date DATE         NOT NULL,
    rating       VARCHAR(7)
        CONSTRAINT duration_non_negative CHECK (duration >= 0),
    CONSTRAINT like_count_non_negative CHECK (likes_count >= 0),
    CONSTRAINT film_name_not_empty CHECK (film_name <> ''),
    CONSTRAINT release_date_is_after CHECK (release_date > '1895-12-28'),
    CONSTRAINT allowed_rating_types CHECK (rating IN ('G', 'PG', 'PG-13', 'R', 'NC-17'))
);

CREATE INDEX IF NOT EXISTS film_id_index ON film (film_id);
CREATE INDEX IF NOT EXISTS film_likes_count_index ON film (likes_count);

CREATE TABLE IF NOT EXISTS user
(
    user_id  BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    birthday DATE,
    email    VARCHAR(100) NOT NULL UNIQUE,
    login    varchar(20)  NOT NULL UNIQUE,
    name     varchar(20)
    CONSTRAINT login_not_empty CHECK (login <> ''),
    CONSTRAINT email_not_empty CHECK (email LIKE '%@%')
);

CREATE INDEX IF NOT EXISTS user_id_index ON user (user_id);

CREATE TABLE IF NOT EXISTS film_likes (
    film_id BIGINT REFERENCES film (film_id) PRIMARY KEY,
    user_id BIGINT REFERENCES user (user_id) PRIMARY KEY
);

CREATE TABLE IF NOT EXISTS genre (
    genre_id INTEGER PRIMARY KEY,
    name VARCHAR(30) UNIQUE
);

CREATE INDEX IF NOT EXISTS genre_id_index ON genre (genre_id);
CREATE INDEX IF NOT EXISTS genre_name ON genre (name);

CREATE TABLE IF NOT EXISTS film_genre (
    film_id BIGINT REFERENCES film (film_id) PRIMARY KEY,
    genre_id INTEGER REFERENCES genre (genre_id) PRIMARY KEY
);

CREATE TABLE IF NOT EXISTS friends (
    user_id BIGINT REFERENCES user (user_id) PRIMARY KEY,
    friend_id BIGINT REFERENCES user (user_id) PRIMARY KEY,
    confirmed BOOL NOT NULL
);

CREATE INDEX IF NOT EXISTS friends_confirmed ON friends (confirmed);